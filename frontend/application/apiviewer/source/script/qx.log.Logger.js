{type:"class",attributes:{"isStatic":"true","name":"Logger","packageName":"qx.log","fullName":"qx.log.Logger","type":"bootstrap"},children:[{type:"desc",attributes:{"text":"<p>Main qooxdoo logging class.</p>\n\n<p>Used as central logging feature by qx.core.Object.</p>\n\n<p>Extremely modular and lightweight to support logging at bootstrap and\nat shutdown as well.</p>\n\n<ul>\n<li>Supports dynamic appenders to push the output to the user.</li>\n<li>Supports buffering of the last 50 messages (configurable)</li>\n<li>Support different debug level (debug, info, error and warn)</li>\n<li>Simple data serialization for incoming messages</li>\n</ul>"}},{type:"methods-static",children:[{type:"method",attributes:{"access":"private","isStatic":"true","name":"__detect"},children:[{type:"params",children:[{type:"param",attributes:{"name":"value"},children:[{type:"desc",attributes:{"text":"<p>Incoming value</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Detects the type of the given variable.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Type of the incoming value</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"access":"private","isStatic":"true","name":"__log"},children:[{type:"params",children:[{type:"param",attributes:{"name":"level"},children:[{type:"desc",attributes:{"text":"<p>One of debug, info, warn or error</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]},{type:"param",attributes:{"name":"args"},children:[{type:"desc",attributes:{"text":"<p>List of other arguments where the first is\n  interpretected as a context object.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Array"}}]}]}]},{type:"desc",attributes:{"text":"<p>Internal logging main routine.</p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"void"}}]}]}]},{type:"method",attributes:{"access":"private","isStatic":"true","name":"__serialize"},children:[{type:"params",children:[{type:"param",attributes:{"name":"value"},children:[{type:"desc",attributes:{"text":"<p>Incoming value</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]},{type:"param",attributes:{"defaultValue":"false","name":"deep"},children:[{type:"desc",attributes:{"text":"<p>Whether arrays and maps should be\n   inspected for their content.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Boolean"}}]}]}]},{type:"desc",attributes:{"text":"<p>Serializes incoming item to a string or a list of serialized values\nfor arrays and maps.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Contains the keys <code>type</code> and <code>text</code>.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Map"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"clear"},children:[{type:"desc",attributes:{"text":"<p>Deletes the current buffer. Has no influence on the message handling of the\nconnected appenders.</p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"void"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"debug"},children:[{type:"params",children:[{type:"param",attributes:{"name":"object"},children:[{type:"desc",attributes:{"text":"<p>Contextual object (could be an instance or a static class)</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]},{type:"param",attributes:{"name":"message"},children:[{type:"desc",attributes:{"text":"<p>Multiple arguments are supported. Each could be any\n  JavaScript variable type. All data gets serialized directly and does not store\n  any references to objects anymore.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Sending a message at debug level to the logger.</p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"void"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"deprecatedClassWarning"},children:[{type:"params",children:[{type:"param",attributes:{"name":"clazz"},children:[{type:"desc",attributes:{"text":"<p>reference to the deprecated class.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Class"}}]}]},{type:"param",attributes:{"defaultValue":"","name":"msg"},children:[{type:"desc",attributes:{"text":"<p>Optional message which is printed.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Prints a class deprecation warning and a stack trace if the setting\n<code>&#8220;qx.deprecationWarnings&#8221;</code> is set to <code>on</code>.</p>"}}]},{type:"method",attributes:{"isStatic":"true","name":"deprecatedMethodWarning"},children:[{type:"params",children:[{type:"param",attributes:{"name":"fcn"},children:[{type:"desc",attributes:{"text":"<p>reference to the deprecated function. This is\n    arguments.callee if the calling method is to be deprecated.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Function"}}]}]},{type:"param",attributes:{"defaultValue":"","name":"msg"},children:[{type:"desc",attributes:{"text":"<p>Optional message which is printed.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Prints a method deprecation warning and a stack trace if the setting\n<code>&#8220;qx.deprecationWarnings&#8221;</code> is set to <code>on</code>.</p>"}}]},{type:"method",attributes:{"isStatic":"true","name":"error"},children:[{type:"params",children:[{type:"param",attributes:{"name":"object"},children:[{type:"desc",attributes:{"text":"<p>Contextual object (could be an instance or a static class)</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]},{type:"param",attributes:{"name":"message"},children:[{type:"desc",attributes:{"text":"<p>Multiple arguments are supported. Each could be any\n  JavaScript variable type. All data gets serialized directly and does not store\n  any references to objects anymore.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Sending a message at error level to the logger.</p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"void"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"getLevel"},children:[{type:"desc",attributes:{"text":"<p>Returns the currently configured debug level.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Debug level</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"getTreshold"},children:[{type:"desc",attributes:{"text":"<p>Returns the currently configured treshold.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>Treshold value</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"info"},children:[{type:"params",children:[{type:"param",attributes:{"name":"object"},children:[{type:"desc",attributes:{"text":"<p>Contextual object (could be an instance or a static class)</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]},{type:"param",attributes:{"name":"message"},children:[{type:"desc",attributes:{"text":"<p>Multiple arguments are supported. Each could be any\n  JavaScript variable type. All data gets serialized directly and does not store\n  any references to objects anymore.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Sending a message at info level to the logger.</p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"void"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"register"},children:[{type:"params",children:[{type:"param",attributes:{"name":"appender"},children:[{type:"desc",attributes:{"text":"<p>A static appender class supporting at\n  least <code>process</code> to handle incoming messages.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Class"}}]}]}]},{type:"desc",attributes:{"text":"<p>Registers the given appender and inserts the last\ncached messages.</p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"void"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"setLevel"},children:[{type:"params",children:[{type:"param",attributes:{"name":"value"},children:[{type:"desc",attributes:{"text":"<p>One of debug, info, warn or error.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Configures the log level minimum required for new messages.</p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"void"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"setTreshold"},children:[{type:"params",children:[{type:"param",attributes:{"name":"value"},children:[{type:"desc",attributes:{"text":"<p>Any positive integer</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Integer"}}]}]}]},{type:"desc",attributes:{"text":"<p>Configures the number of messages to kept in buffer.</p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"void"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"trace"},children:[{type:"params",children:[{type:"param",attributes:{"name":"object"},children:[{type:"desc",attributes:{"text":"<p>Contextual object (could be an instance or a static class)</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]}]},{type:"desc",attributes:{"text":"<p>Prints the current stak trace</p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"void"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"unregister"},children:[{type:"params",children:[{type:"param",attributes:{"name":"appender"},children:[{type:"desc",attributes:{"text":"<p>A static appender class</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Class"}}]}]}]},{type:"desc",attributes:{"text":"<p>Unregisters the given appender</p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"void"}}]}]}]},{type:"method",attributes:{"isStatic":"true","name":"warn"},children:[{type:"params",children:[{type:"param",attributes:{"name":"object"},children:[{type:"desc",attributes:{"text":"<p>Contextual object (could be an instance or a static class)</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Object"}}]}]},{type:"param",attributes:{"name":"message"},children:[{type:"desc",attributes:{"text":"<p>Multiple arguments are supported. Each could be any\n  JavaScript variable type. All data gets serialized directly and does not store\n  any references to objects anymore.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Sending a message at warning level to the logger.</p>"}},{type:"return",children:[{type:"types",children:[{type:"entry",attributes:{"type":"void"}}]}]}]}]}]}